generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  phone         String    @default("")
  website       String    @default("")

  name     String?
  image    String?
  password String?
  role     ROLE    @default(MANAGER)
  access   ACCESS  @default(USER)

  twoFactorSecret     String?
  tempTwoFactorSecret String?
  twoFactorEnabled    Boolean @default(false)

  createdByAdmin Boolean   @default(false)
  isActive       Boolean   @default(true)
  deactivatedAt  DateTime?

  // Stripe
  stripeCustomerId           String?
  stripeSubscriptionId       String?
  stripePaymentMethodId      String?
  stripePriceId              String?
  plan                       PLAN?
  stripeSubscriptionStatus   String?
  stripeSubscriptionCancelAt DateTime?
  stripeCurrentPeriodEnd     DateTime?
  stripeSubscriptionTerm     PLAN_TERM?
  planIsActive               Boolean    @default(false)

  //razorpay
  razorpayCustomerId           String?    @unique
  razorpaySubscriptionEndDate  DateTime?
  razorpaySubscriptionCancelAt DateTime?
  razorpayPlanPriceId          String?
  razorpayPlanPeriod           PLAN_TERM?
  razorpaySubscriptionId       String?    @unique
  razorpaySubscriptionStatus   String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  agencyId      String?
  Agency        User?   @relation("AgencyToMembers", fields: [agencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  AgencyMembers User[]  @relation("AgencyToMembers")

  // sales agent (business relation)
  businessId String?
  Business   Business? @relation("BusinessSalesAgents", fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  ownerBusinessId String?
  OwnerBusiness   Business? @relation("BusinessOwner", fields: [ownerBusinessId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Config Config?

  Account         Account[]
  Session         Session[]
  AgencyLeads     Lead[]    @relation("AgencyToLead")
  SalesAgentLeads Lead[]    @relation("SalesAgentToLead")

  SalesAgentMeetings Meeting[]  @relation("SalesAgentToMeeting")
  AgencyMeetings     Meeting[]  @relation("AgencyToMeeting")
  AgencyCalls        LeadCall[] @relation("AgencyToLeadCall")
  AgentCalls         LeadCall[] @relation("SalesAgentToLeadCall")

  agencyApiKeys  ApiKey[] @relation("AgencyToApiKey")
  managerApiKeys ApiKey[] @relation("ManagerToApiKey")

  Campaigns            Campaign[]
  CampaignLeads        CampaignLead[]
  Assistant            Assistant[]
  Pipelines            Pipeline[]
  Opportunities        Opportunity[]
  Stages               Stage[]
  Events               Event[]
  AgentFollowUps       FollowUp[]            @relation("SalesAgentToFollowUp")
  AgencyFollowUps      FollowUp[]            @relation("AgencyToFollowUp")
  ConversationMessages ConversationMessage[]
  Conversations        Conversation[]
  AgencyBusinesses     Business[]            @relation("BusinessAgency")
  ManagerBusinesses    BusinessManager[]
  preferenceId         String?
  Agents               Agent[]
  PrimaryAgents        PrimaryAgent[]
  ChatSessions         ChatSession[]
  Automations          Automation[]

  @@index([agencyId])
  @@index([businessId])
  @@index([ownerBusinessId])
}

model ApiKey {
  id        String    @id @default(uuid())
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  lastUsed  DateTime?

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation("AgencyToApiKey", fields: [agencyId], references: [id], onDelete: Cascade)

  managerId String?
  Manager   User?   @relation("ManagerToApiKey", fields: [managerId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([businessId])
  @@index([managerId])
}

model Assistant {
  id String @id @default(uuid())

  name        String
  description String @db.Text
  config      Json?

  // Relations
  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  Campaigns Campaign[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([businessId])
}

model Config {
  id String @id @default(uuid())

  // White Label Configuration
  whiteLabel               Boolean @default(false)
  showCRM                  Boolean @default(true)
  showCampaign             Boolean @default(true)
  customDomain             String?
  customRootDomain         String?
  customRootDomainVerified Boolean @default(false)
  companyName              String  @default("")
  onlyLogo                 Boolean @default(false)
  companyLogo              String  @default("")
  primaryColor             String  @default("#000000")
  secondaryColor           String  @default("#ffffff")
  faviconUrl               String  @default("")
  title                    String  @default("")
  description              String? @db.Text

  // Nameserver-based wildcard domain support
  isWildcard            Boolean @default(false)
  wildcardSetupMethod   String? // 'nameservers' or 'dns'
  nameserversConfigured Boolean @default(false)

  // Database Configuration
  databaseUrl     String?
  migrationStatus MIGRATION_STATUS @default(PENDING)
  migratedAt      DateTime?

  // Relations 
  agencyId String @unique
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessConfig {
  id String @id @default(uuid())

  // White Label Configuration
  whiteLabel               Boolean @default(false)
  subdomain                String? // For agency subdomain (e.g., business.agency.com)
  customDomain             String?
  customRootDomain         String?
  customRootDomainVerified Boolean @default(false)
  companyName              String  @default("")
  onlyLogo                 Boolean @default(false)
  companyLogo              String  @default("")
  primaryColor             String  @default("#000000")
  secondaryColor           String  @default("#ffffff")
  faviconUrl               String  @default("")
  title                    String  @default("")
  description              String? @db.Text

  // Limitations
  maxLeads Int @default(100)

  // Relations 
  businessId String   @unique
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subdomain])
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Lead {
  id String @id @default(uuid())

  // personal information
  name           String
  firstName      String    @default("")
  lastName       String    @default("")
  email          String?
  bestEmail      String    @default("")
  emailVerified  Boolean   @default(false)
  phone          String?
  bestPhone      String    @default("")
  phoneVerified  Boolean   @default(false)
  dateOfBirth    DateTime?
  leadIsVerified Boolean   @default(false) // if either email or phone is verified
  profileImage   String?

  // general info
  ianaTimezone String  @default("") // Asia/Kolkata
  country      String  @default("") // country of the lead
  city         String  @default("") // city of the lead
  state        String  @default("") // state of the lead
  zipCode      String  @default("") // zip code of the lead
  address      String? @db.Text // address of the lead

  // additional info 
  company        String  @default("")
  companyAddress String? @db.Text
  industry       String  @default("") // ex: Real Estate, Marketing etc.
  website        String  @default("")
  message        String? @db.Text // message sent by the lead
  channel        CHANNEL @default(EMAIL) // lead source channel
  note           String? @db.Text // note about the lead by agency/agent
  fields         Json? // custom fields

  // DND (Do Not Disturb)
  emailDND    Boolean @default(false)
  smsDND      Boolean @default(false)
  callDND     Boolean @default(false)
  whatsappDND Boolean @default(false)

  // Channel Availability - which channels are active/available for this contact
  emailActive     Boolean @default(false)
  smsActive       Boolean @default(false)
  whatsappActive  Boolean @default(false)
  facebookActive  Boolean @default(false)
  instagramActive Boolean @default(false)
  liveChatActive  Boolean @default(false)
  voiceCallActive Boolean @default(false)

  // Channel Specific Metadata Fields
  instagramSID     String?
  instaUsername    String?
  facebookSenderId String?
  facebookUsername String?

  // Metadata 
  status     LEAD_STATUS      @default(NEW)
  statusType LEAD_STATUS_TYPE @default(COLD)
  quality    LEAD_QUALITY     @default(UNQUALIFIED)

  // other fields
  ghlContactId String?

  // Relations
  agencyId String
  Agency   User   @relation("AgencyToLead", fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  salesAgentId String?
  SalesAgent   User?   @relation("SalesAgentToLead", fields: [salesAgentId], references: [id], onDelete: SetNull)

  isTestLead     Boolean @default(false)
  linkedLeadId   String? // soft-link to "main" profile if this is a secondary lead
  linkedLead     Lead?   @relation("LinkedLeads", fields: [linkedLeadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  duplicateLeads Lead[]  @relation("LinkedLeads")

  // Metadata Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Meeting              Meeting[]
  LeadCalls            LeadCall[]
  CampaignLead         CampaignLead[]
  LeadTags             LeadTag[]
  LeadNotes            LeadNote[]
  Opportunity          Opportunity[]
  FollowUp             FollowUp[]
  Conversation         Conversation?
  ConversationMessages ConversationMessage[]
  ChatSessions         ChatSession[]
  AutomationSessions   AutomationSession[]

  @@index([agencyId])
  @@index([salesAgentId])
  @@index([businessId])
  @@index([status])
  @@index([phone])
  @@index([email])
  @@index([ghlContactId])
  @@index([linkedLeadId])
}

model LeadTag {
  id String @id @default(uuid())

  name  String
  color String

  // Relations
  Leads Lead[]

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}

model LeadNote {
  id String @id @default(uuid())

  note String         @db.Text
  type LEAD_NOTE_TYPE @default(NOTE)

  // Relations
  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([leadId])
}

model Conversation {
  id String @id @default(uuid())

  starred Boolean @default(false)
  killed  Boolean @default(false)

  replyMode REPLY_MODE @default(AUTO)

  // Relations
  leadId String @unique
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  activeAgentId String?
  ActiveAgent   PrimaryAgent? @relation(fields: [activeAgentId], references: [id], onDelete: SetNull)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  ConversationMessages ConversationMessage[]

  @@index([leadId])
  @@index([agencyId])
  @@index([businessId])
  @@index([activeAgentId])
}

model ConversationMessage {
  id String @id @default(uuid())

  content String                      @db.Text
  sender  MESSAGE_SENDER              @default(AI_AGENT)
  status  CONVERSATION_MESSAGE_STATUS @default(SENT)
  snippet String                      @default("")

  channel  CHANNEL           @default(EMAIL)
  itemType MESSAGE_ITEM_TYPE @default(MESSAGE)
  source   MESSAGE_SOURCE    @default(RECALLSYNC)

  // SYSTEM EVENTS (tool_calls etc)
  systemEvent       SYSTEM_EVENT?
  systemEventStatus SYSTEM_EVENT_STATUS?
  systemData        Json?
  systemDescription String?              @db.Text // ex: Appointment booked for 10:00 AM on 10th July 2025

  ghlMessageId String?

  // Call Message Items
  callId String?
  Call   LeadCall? @relation(fields: [callId], references: [id], onDelete: Cascade)

  // Relations
  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  conversationId String
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  agentId String?
  Agent   Agent?  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([leadId])
  @@index([conversationId])
  @@index([callId])
  @@index([agencyId])
  @@index([businessId])
  @@index([agentId])
}

model PrimaryAgent {
  id String @id @default(uuid())

  name         String
  internalName String  @default("")
  description  String? @db.Text

  agentGoal               String? @db.Text
  goalCompleteCriteria    String? @db.Text
  stopScenarioDescription String? @db.Text

  // agent training 
  // {url}/train -> agent traning url 
  // {url}/create -> create vector indexes 
  // {url}/update -> update vector indexes
  // {url}/delete -> delete vector indexes
  n8nTrainingUrl   String @default("")
  n8nTrainingToken String @default("")

  // Relations
  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  ghlCalendarId         String?
  calenderIntegrationId String?
  CalenderIntegration   CalenderIntegration? @relation(fields: [calenderIntegrationId], references: [id], onDelete: SetNull)

  // nextPrimaryAgent
  nextPrimaryAgentId String?
  NextPrimaryAgent   PrimaryAgent?  @relation("NextPrimaryAgents", fields: [nextPrimaryAgentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  NextPrimaryAgents  PrimaryAgent[] @relation("NextPrimaryAgents")

  Agents             Agent[]
  Conversations      Conversation[]
  PrimaryAgentAssets PrimaryAgentAsset[]
  ChatSessions       ChatSession[]
  Campaigns          Campaign[]
  AutomationSessions AutomationSession[]
  Automations        Automation[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([agencyId])
  @@index([calenderIntegrationId])
  @@index([nextPrimaryAgentId])
}

model PrimaryAgentAsset {
  id String @id @default(uuid())

  name        String  @default("")
  description String? @db.Text

  // UPLOADTHING
  fileUrl  String
  fileKey  String
  fileType String
  fileSize Int    @default(0) // in KB

  // Relations
  primaryAgentId String
  PrimaryAgent   PrimaryAgent @relation(fields: [primaryAgentId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([primaryAgentId])
}

model Agent {
  id String @id @default(uuid())

  name        String
  description String? @db.Text

  // n8n config 
  n8nUrl        String  @default("")
  n8nToken      String  @default("")
  // n8n workflow id
  n8nWorkflowId String?

  // agent settings
  settings Json
  isActive Boolean @default(false)

  // sequence config
  sequenceActive Boolean @default(false)
  sequenceConfig Json?   @default("{}") // sequence config json 

  // followup config 
  followupActive Boolean @default(false)
  followupConfig Json?   @default("{}") // followup config json 

  channel CHANNEL    @default(EMAIL)
  type    AGENT_TYPE @default(INTEGRATED)

  // integrated channel config 
  flow           Json?            @default("{\"nodes\":[{\"id\":\"start-1\",\"type\":\"start\",\"position\":{\"x\":100,\"y\":200},\"data\":{\"label\":\"Start\",\"description\":\"Conversation starts here\"}}],\"edges\":[]}") // react flow json 
  flowSettings   Json?            @default("{}") // react flow settings json 
  voiceAgentType VOICE_AGENT_TYPE @default(CONVERSATION_PATHWAY)

  // VAPI
  vapiPhoneNumberId String?
  vapiAssistantId   String?

  //ELEVEN_LABS
  elevenlabsAgentId       String?
  elevenlabsPhoneNumberId String?

  // RETELL
  retellAgentId     String?
  retellPhoneNumber String?

  // Relations
  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  primaryAgentId String
  PrimaryAgent   PrimaryAgent  @relation(fields: [primaryAgentId], references: [id], onDelete: Cascade)
  ChatSessions   ChatSession[]

  AgentChannelConfig AgentChannelConfig?

  useN8N Boolean @default(false)

  // Metadata
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  AgentTools           AgentTool[]
  ConversationMessages ConversationMessage[]

  @@index([businessId])
  @@index([agencyId])
  @@index([primaryAgentId])
}

model AgentTool {
  id String @id @default(uuid())

  definition Json

  Agents Agent[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id        String @id @default(uuid())
  meetingId String @unique

  startTime     String
  messageOfLead String         @db.Text
  meetingUrl    String?
  status        MEETING_STATUS @default(UPCOMING)

  // Relations
  salesAgentId String?
  SalesAgent   User?   @relation("SalesAgentToMeeting", fields: [salesAgentId], references: [id], onDelete: SetNull)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation("AgencyToMeeting", fields: [agencyId], references: [id], onDelete: Cascade)

  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  calendarType  CALENDAR_TYPE  @default(CAL)
  meetingSource MEETING_SOURCE @default(PLATFORM)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([salesAgentId])
  @@index([businessId])
  @@index([leadId])
}

model LeadCall {
  id          String          @id @default(uuid())
  callId      String          @default("")
  type        CALL_TYPE       @default(OUTBOUND)
  endedReason CALL_END_REASON @default(unknown_error)
  result      CALL_RESULT     @default(SUCCESS)
  notes       String?         @db.Text
  summary     String?         @db.Text
  transcript  Json?
  audioUrl    String          @default("")

  callType   LEAD_CALL_TYPE @default(GLOBAL)
  callSource CALL_SOURCE    @default(VAPI)

  callDuration  Float @default(0)
  costVoice     Float @default(0) // total voiceAi cost
  costTelephony Float @default(0) // total telephony cost
  totalCost     Float @default(0) // total call cost

  // Relations
  leadId String?
  Lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation("AgencyToLeadCall", fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  salesAgentId String?
  SalesAgent   User?   @relation("SalesAgentToLeadCall", fields: [salesAgentId], references: [id], onDelete: SetNull)

  campaignId String?
  Campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  ConversationMessages ConversationMessage[]

  @@index([agencyId])
  @@index([salesAgentId])
  @@index([leadId])
  @@index([campaignId])
  @@index([businessId])
}

model Campaign {
  id String @id @default(uuid())

  name        String
  description String          @db.Text
  status      CAMPAIGN_STATUS @default(DRAFT)

  // Settings
  withRetries       Boolean   @default(false)
  withFollowUp      Boolean   @default(false)
  retries           Int       @default(3)
  maxRetryAttempts  Int       @default(3)
  callBackDelay     Int       @default(60)
  concurrentCalls   Int       @default(1)
  startDate         DateTime?
  startTime         String    @default("05:30")
  workingHoursStart String    @default("09:00")
  workingHoursEnd   String    @default("17:00")
  timeZone          String    @default("IST")
  settingsUpdated   Boolean   @default(false)

  // New Settings Fields
  retryInterval     Int?    @default(2)
  retryIntervalType String? @default("hour") // "hour" | "day"
  weeklySchedule    Json? // Weekly schedule with time slots per day

  // Relations
  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  assistants Assistant[]

  primaryAgentId String?
  PrimaryAgent   PrimaryAgent? @relation(fields: [primaryAgentId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CampaignLeads CampaignLead[]
  LeadCalls     LeadCall[]

  @@index([agencyId])
  @@index([businessId])
  @@index([primaryAgentId])
}

model CampaignLead {
  id String @id @default(uuid())

  campaignId String
  Campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  status     CAMPAIGN_LEAD_STATUS  @default(PENDING)
  quality    CAMPAIGN_LEAD_QUALITY @default(LOW)
  result     CAMPAIGN_LEAD_RESULT  @default(SUCCESS)
  notes      String?               @db.Text
  followUpAt DateTime?

  calledAt    DateTime?
  retriesLeft Int       @default(3)
  nextRetryAt DateTime?

  @@index([agencyId])
  @@index([businessId])
  @@index([campaignId])
  @@index([leadId])
}

model Pipeline {
  id   String @id @default(uuid())
  name String

  // Relations
  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stages        Stage[]
  Opportunities Opportunity[]

  @@index([agencyId])
  @@index([businessId])
}

model Stage {
  id    String @id @default(uuid())
  name  String
  order Int    @default(0)

  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Opportunities Opportunity[]

  @@index([pipelineId])
  @@index([agencyId])
  @@index([businessId])
}

model Opportunity {
  id           String             @id @default(uuid())
  name         String
  description  String?            @db.Text
  status       OPPORTUNITY_STATUS @default(OPEN)
  source       String             @default("")
  value        Float?
  businessName String?

  order Int @default(0)

  // Relations
  stageId String
  Stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)

  pipelineId String
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  addedToStageAt DateTime @default(now())

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stageId])
  @@index([leadId])
  @@index([agencyId])
  @@index([pipelineId])
  @@index([businessId])
}

model Preference {
  id String @id @default(uuid())

  businessId String   @unique
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  leadPreference Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}

// Automation
model Event {
  id String @id @default(uuid())

  name        String
  description String  @db.Text
  url         String  @db.Text
  token       String
  isActive    Boolean @default(false)

  event EVENT @default(OPPORTUNITY_EVENT)

  // Relations
  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, event])
  @@index([agencyId])
  @@index([businessId])
}

// Follow up
model FollowUp {
  id String @id @default(uuid())

  reason     String           @db.Text // why follow up
  notes      String           @db.Text // notes
  status     FOLLOW_UP_STATUS @default(PENDING)
  summary    String           @db.Text // conversation summary
  followUpAt DateTime // when to follow up
  priority   PRIORITY         @default(LOW) // priority of the follow up
  attempts   Int              @default(0) // number of attempts
  type       FOLLOW_UP_TYPE   @default(AI_AGENT) // type of follow up
  source     FOLLOW_UP_SOURCE @default(MANUAL_SCHEDULED) // source of the follow up
  channel    CHANNEL          @default(EMAIL)

  referenceId String? // for meeting followup reference id will be meeting id

  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  salesAgentId String?
  SalesAgent   User?   @relation("SalesAgentToFollowUp", fields: [salesAgentId], references: [id], onDelete: SetNull)

  agencyId String
  Agency   User   @relation("AgencyToFollowUp", fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([salesAgentId])
  @@index([leadId])
  @@index([createdAt])
  @@index([businessId])
  @@index([referenceId])
}

model Business {
  id      String  @id @default(uuid())
  name    String
  image   String  @default("")
  email   String
  phone   String
  address String? @db.Text

  // bizz razorpay
  planIsActive                 Boolean    @default(false)
  plan                         PLAN       @default(FREE)
  razorpayCustomerId           String?    @unique
  razorpaySubscriptionEndDate  DateTime?
  razorpaySubscriptionCancelAt DateTime?
  razorpayPlanPriceId          String?
  razorpayPlanPeriod           PLAN_TERM?
  razorpaySubscriptionId       String?    @unique
  razorpaySubscriptionStatus   String?

  // Twilio
  twilioAccountSid String @default("")

  // VAPI
  vapiPrivateKey String @default("")

  // Trieve
  trieveApiKey         String @default("")
  trieveOrganizationId String @default("")

  // n8n
  n8nWebhookSecret String @unique @default(uuid())
  n8nWebhookUrl    String @default("")

  setupCompleted Boolean @default(false)

  // Relations
  agencyId String
  Agency   User   @relation("BusinessAgency", fields: [agencyId], references: [id], onDelete: Cascade)

  // New relation for managers
  SalesAgents User[] @relation("BusinessSalesAgents")

  // Business Owners 
  BusinessOwners User[] @relation("BusinessOwner")

  // Rebilling fields
  lastMessagesChargedAt DateTime @default(now())
  lastVoiceChargedAt    DateTime @default(now())
  chargeConfig          Json? // prices set by agency for messages and voice

  // Metadata Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  BusinessIntegration  BusinessIntegration?
  BusinessManagers     BusinessManager[]
  ApiKeys              ApiKey[]
  Assistants           Assistant[]
  Leads                Lead[]
  LeadTag              LeadTag[]
  Conversation         Conversation[]
  ConversationMessage  ConversationMessage[]
  Meetings             Meeting[]
  Campaigns            Campaign[]
  CampaignLeads        CampaignLead[]
  Pipelines            Pipeline[]
  Stages               Stage[]
  Opportunities        Opportunity[]
  Preference           Preference?
  Events               Event[]
  FollowUps            FollowUp[]
  LeadCalls            LeadCall[]
  BusinessConfig       BusinessConfig?
  Agents               Agent[]
  PrimaryAgents        PrimaryAgent[]
  calenderIntegrations CalenderIntegration[]
  n8nIntegrations      N8NIntegration[]
  ChatSessions         ChatSession[]
  Providers            Provider[]
  VoiceChargeLogs      VoiceChargeLog[]
  MessageChargeLogs    MessageChargeLog[]
  Automations          Automation[]

  @@index([agencyId])
}

model BusinessManager {
  id           String        @id @default(uuid())
  businessId   String
  Business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessRole BUSINESS_ROLE @default(BUSINESS_OWNER)
  managerId    String
  Manager      User          @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([managerId])
}

model BusinessIntegration {
  id String @id @default(uuid())

  businessId String   @unique
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Twilio 
  twilioAccountSid String? @db.Text
  twilioAuthToken  String? @db.Text

  // Twilio Trunk - @todo must be a separate table (with multiple trunks)
  twilioTrunkAuthUsername      String? @db.Text
  twilioTrunkAuthPassword      String? @db.Text
  twilioTrunkTerminationSIPUrl String? @db.Text
  twilioTrunkSIPNumber         String?

  calenderIntegrations CalenderIntegration[]
  n8nIntegrations      N8NIntegration[]

  @@index([businessId])
}

model CalenderIntegration {
  id String @id @default(uuid())

  type CALENDER_TYPE @default(CAL)

  calEventId  String
  calUsername String
  calApiKey   String

  // Relations
  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  businessIntegrationId String
  BusinessIntegration   BusinessIntegration @relation(fields: [businessIntegrationId], references: [id], onDelete: Cascade)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  PrimaryAgents PrimaryAgent[]

  @@index([businessId])
  @@index([businessIntegrationId])
}

model N8NIntegration {
  id String @id @default(uuid())

  name        String
  description String
  url         String
  token       String

  // Relations
  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  businessIntegrationId String
  BusinessIntegration   BusinessIntegration @relation(fields: [businessIntegrationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([businessIntegrationId])
}

// Agentic Layer Tables
model ChatSession {
  id String @id @default(uuid())

  rsRunId   String // restack run id 
  rsAgentId String // restack agent id 

  status       AGENT_SESSION_STATUS @default(ACTIVE)
  statusReason String?              @db.Text // reason for the status change

  messages     Json? // Message[]
  currentEvent String? // current event name

  // Relations
  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  primaryAgentId String
  PrimaryAgent   PrimaryAgent @relation(fields: [primaryAgentId], references: [id], onDelete: Cascade)

  agentId String
  Agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  // sequence & followup 
  activeSequencePosition Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([leadId])
  @@index([agencyId])
  @@index([primaryAgentId])
  @@index([agentId])
}

model Automation {
  id String @id @default(uuid())

  name        String
  description String?           @db.Text
  status      AUTOMATION_STATUS @default(DRAFT)

  flow         Json? // react flow json 
  flowSettings Json? // react flow settings json 

  // Relations 
  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  agencyId String
  Agency   User   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  primaryAgentId String
  PrimaryAgent   PrimaryAgent @relation(fields: [primaryAgentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([agencyId])
  @@index([primaryAgentId])
}

model AutomationSession {
  id String @id @default(uuid())

  rsRunId   String // restack run id 
  rsAgentId String // restack agent id 

  status       AGENT_SESSION_STATUS @default(ACTIVE)
  statusReason String?              @db.Text // reason for the status change

  primaryAgentId String
  PrimaryAgent   PrimaryAgent @relation(fields: [primaryAgentId], references: [id], onDelete: Cascade)

  leadId String
  Lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([leadId])
  @@index([primaryAgentId])
  @@index([rsAgentId])
  @@index([rsRunId])
}

model Provider {
  id       String   @id @default(uuid())
  provider PROVIDER

  isActive   Boolean @default(true)
  config     Json?
  businessId String

  AgentChannelConfig AgentChannelConfig[] // provider is connected with multiple channel configs

  Business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}

model AgentChannelConfig {
  id String @id @default(uuid())

  isActive Boolean @default(true)

  provider PROVIDER

  agentId String @unique
  Agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  providerId String?
  Provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([providerId])
  @@index([agentId])
}

// The log for voice call charged to business
model VoiceChargeLog {
  id String @id @default(uuid())

  totalCost  Float
  totalCalls Int

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([businessId])
}

// The log for message cost charged to business
model MessageChargeLog {
  id String @id @default(uuid())

  totalCost  Float
  totalCalls Int

  businessId String
  Business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([businessId])
}

enum AGENT_TYPE {
  INTEGRATED // platform managed agents
  N8N // n8n managed agents
  VAPI // vapi managed agents
  ELEVEN_LABS
  RETELL
  ULTRA_VOX
}

enum VOICE_AGENT_TYPE {
  CONVERSATION_PATHWAY
  SINGLE_PROMPT
}

enum AGENT_SESSION_STATUS {
  ACTIVE
  TERMINATED
  COMPLETED
  FAILED
}

enum AUTOMATION_STATUS {
  DRAFT
  ACTIVE
  PAUSED
  TERMINATED
  COMPLETED
  FAILED
}

enum CALENDER_TYPE {
  CAL
  CALENDLY
}

enum ROLE {
  ADMIN
  AGENCY // agency 
  MANAGER // agency manager (Multiple business managers for an agency can be assigned to multiple businesses)
  SALES_AGENT // business sales agent
  BUSINESS_OWNER // business owner
}

enum ACCESS {
  USER
  ADMIN // manager have admin access to the agency (all businesses)
}

enum PLAN {
  FREE
  BUSINESS_BASIC
  BUSINESS_ADVANCE
}

enum PLAN_TERM {
  MONTHLY
  YEARLY
}

// Lead Enums 
enum LEAD_STATUS {
  NEW
  CONTACTED
  RETRYING
  JUNK
  BOOKED
}

enum LEAD_STATUS_TYPE {
  HOT
  WARM
  COLD
}

enum LEAD_QUALITY {
  UNQUALIFIED
  LOW
  MEDIUM
  HIGH
  PERFECT
}

// Meeting Enums

enum MEETING_STATUS {
  UPCOMING
  SUCCESS
  NO_SHOW
  CANCELLED
}

enum CALL_TYPE {
  INBOUND
  OUTBOUND
  WEB
}

enum CALL_END_REASON {
  customer_busy
  assistant_not_valid
  assistant_not_provided
  customer_ended_call
  customer_did_not_answer
  assistant_ended_call
  db_error
  exceeded_max_duration
  assistant_not_found
  assistant_said_end_call_phrase
  voicemail
  worker_shutdown
  unknown_error
}

enum CALL_RESULT {
  SUCCESS
  FAILURE
}

enum CAMPAIGN_STATUS {
  DRAFT
  TESTING
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

enum CAMPAIGN_LEAD_STATUS {
  PENDING
  RETRYING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CAMPAIGN_LEAD_QUALITY {
  LOW
  MEDIUM
  HIGH
}

enum CAMPAIGN_LEAD_RESULT {
  SUCCESS
  FAILURE
}

enum LEAD_CALL_TYPE {
  GLOBAL
  CAMPAIGN
}

enum CALL_SOURCE {
  RECALLSYNC
  VAPI
  RETELL
  ELEVENLABS
}

// Pipeline Enums
enum OPPORTUNITY_STATUS {
  OPEN
  LOST
  WON
  ABANDONED
}

// Automation Enums
enum EVENT {
  // PIPELINE EVENTS 
  OPPORTUNITY_EVENT
  STAGE_EVENT
  PIPELINE_EVENT

  // Opportunity events 
  OPPORTUNITY_CREATED
  OPPORTUNITY_UPDATED
  OPPORTUNITY_DELETED
  OPPORTUNITY_STATUS_CHANGED
  OPPORTUNITY_STAGE_CHANGED

  // Stage events
  STAGE_CREATED
  STAGE_UPDATED
  STAGE_DELETED

  // Pipeline events
  PIPELINE_CREATED
  PIPELINE_UPDATED
  PIPELINE_DELETED

  // Lead events
  LEAD_EVENTS
  LEAD_CREATED
  LEAD_UPDATED
  LEAD_DELETED
  LEAD_STATUS_CHANGED
  LEAD_QUALITY_CHANGED

  // Lead call events 
  LEAD_CALL_CREATED
  LEAD_CALL_UPDATED
  LEAD_CALL_DELETED

  // Meeting events 
  MEETING_EVENTS
  MEETING_CREATED
  MEETING_UPDATED
  MEETING_DELETED
  MEETING_STATUS_CHANGED

  //  CAMPAIGN EVENTS

  // Campaign lead events 
  CAMPAIGN_LEAD_CREATED
  CAMPAIGN_LEAD_UPDATED
  CAMPAIGN_LEAD_DELETED

  // Campaign events 
  CAMPAIGN_EVENTS
  CAMPAIGN_CREATED
  CAMPAIGN_UPDATED
  CAMPAIGN_DELETED
  CAMPAIGN_STATUS_CHANGED

  // Campaign call events 
  CAMPAIGN_CALL_CREATED
  CAMPAIGN_CALL_UPDATED
  CAMPAIGN_CALL_DELETED
  CAMPAIGN_CALL_STATUS_CHANGED

  // FOLLOWUP EVENTS
  FOLLOWUP_EVENTS
  FOLLOWUP_CREATED
  FOLLOWUP_UPDATED
  FOLLOWUP_DELETED
  FOLLOWUP_STATUS_CHANGED
  FOLLOWUP_PRIORITY_CHANGED

  // CONVERSATION AUTOMATIONS
  SEND_MESSAGE
}

enum PRIORITY {
  LOW
  MEDIUM
  HIGH
}

enum FOLLOW_UP_STATUS {
  PENDING
  COMPLETED
  RETRYING
  DROPPED
}

enum FOLLOW_UP_TYPE {
  AI_AGENT
  HUMAN_AGENT
}

enum FOLLOW_UP_SOURCE {
  MANUAL_SCHEDULED // created by lead
  AUTO_SCHEDULED // created by agent/us

  // Appointment follow ups
  UPCOMING_APPOINTMENT
  NO_SHOW_APPOINTMENT
  CANCELLED_APPOINTMENT

  ENGAGEMENT
}

enum PROVIDER {
  VAPI
  TWILIO
  GHL
  HUBSPOT
  N8N
  LLM
  ELEVEN_LABS
  CARTESIA
  RETELL
  ULTRA_VOX
}

enum MESSAGE_ITEM_TYPE {
  MESSAGE
  CALL
}

enum SYSTEM_EVENT {
  AVAILABILITY_CHECK
  GET_APPOINTMENTS
  BOOK_APPOINTMENT
  CANCEL_APPOINTMENT
  RESCHEDULE_APPOINTMENT
  UPDATE_CONTACT
  AGENT_TRIGGERED
  AGENT_TERMINATED
}

enum MESSAGE_SOURCE {
  RECALLSYNC
  N8N
}

enum SYSTEM_EVENT_STATUS {
  SUCCESS
  FAILED
  PENDING
  PARTIAL
}

enum SYSTEM_EVENT_TYPE {
  TOOL_CALL
  NOTIFICATION
  ACTION
  ERROR
}

enum MESSAGE_SENDER {
  AI_AGENT
  HUMAN_AGENT
  LEAD
  SYSTEM
}

enum CONVERSATION_MESSAGE_STATUS {
  SENT
  DRAFT
  SCHEDULED
  FAILED
}

enum REPLY_MODE {
  AUTO
  MANUAL
}

enum LEAD_NOTE_TYPE {
  NOTE // for notes
  NOTIFICATION // for notifications
  CONVERSATION // for conversations
}

enum MIGRATION_STATUS {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// WhatsApp (DEFAULT) -> Standalone Channel (Every agent will have a SOURCE->DEFAULT->CHANNEL->WHATSAPP)
// GRM (GHL) -> Multiple Channels (Every Agent will have a SOURCE->GOHIGHLEVEL->CHANNEL->WHATSAPP)
enum SOURCE {
  DEFAULT // default source mean no source and only channel
  GOHIGHLEVEL // GHL is a source and will have multiple channels
  HUBSPOT
  ZOHO
  SALESFORCE
}

enum CALENDAR {
  CAL
  GOHIGHLEVEL
}

enum CHANNEL {
  EMAIL
  SMS
  WHATSAPP
  FACEBOOK
  INSTAGRAM
  LIVE_CHAT
  VOICE_CALL
}

enum CALENDAR_TYPE {
  CAL
  CALENDLY
  GHL
}

enum MEETING_SOURCE {
  PLATFORM
  OUTSIDE
}

enum BUSINESS_ROLE {
  BUSINESS_OWNER
  BUSINESS_MANAGER
}
